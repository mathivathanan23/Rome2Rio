This code I wrote for to create ETL pipelines for structured reporting at my previous work (a modified version of the problem) 
This code first takes on csv formatted data >> extracting that format >> transform to normalise salary such as filtering high salaries by department 
This code finally load the data into structure dictonary for reporting purpose 

#sample csv formatted data 

Employee,Department,Salary
Mathi,Engineering,$60,000
Bob,E-commerce,$45,000
Claire,Engineering,$80,000



# Example use of the code

etl = ETLPipeline("employee_salary.csv")
etl.extract()  # Extract data from CSV
department_totals = etl.transform()  # Transform and get department-wise salary totals
structured_data = etl.load()  # Load into structured dictionary

print("Department Salary Totals:", department_totals)
print("Structured Data:", structured_data)

#Sample Output 


{
    "Engineering": [
        {"Employee": "Mathi", "Salary": 60000.0},
        {"Employee": "Claire", "Salary": 80000.0}
    ]
}


#Actual Code

import csv  
from collections import defaultdict  

class ETLPipeline:  #creating ETL pipelines 
    def __init__(self, file_path):  
        self.file_path = file_path  
        self.data = []  

    def extract(self):   #Extracting the data for the format 
        with open(self.file_path, mode='r', encoding='utf-8') as file:  
            reader = csv.DictReader(file)  
            self.data = list(reader)  

""" BODY """ 

    def transform(self):  
        """Calculates total salary per department and filters employees with salaries above $50,000."""  
        transformed_data = []  
        department_salaries = defaultdict(float)  

        for row in self.data:  
            salary = float(row["Salary"].replace("$", "").replace(",", "").strip())  

            if salary >= 50000:  
                transformed_data.append({  
                    "Employee": row["Employee"],  
                    "Department": row["Department"],  
                    "Salary": salary  
                })  
                department_salaries[row["Department"]] += salary  

        self.data = transformed_data  
        return department_salaries  

    def load(self):  
        """Organises transformed data into a structured dictionary grouped by department."""  
        structured_data = defaultdict(list)  

        for row in self.data:  
            structured_data[row["Department"]].append({  
                "Employee": row["Employee"],  
                "Salary": row["Salary"]  
            })  

        return structured_data  
